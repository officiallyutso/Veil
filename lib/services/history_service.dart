import 'package:flutter/material.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:uuid/uuid.dart';
import 'package:veil/models/history_model.dart';

class HistoryService extends ChangeNotifier {
  static const String _historyBoxName = 'history';
  
  late Box<HistoryItem> _historyBox;
  late List<HistoryItem> _historyItems;
  final _uuid = Uuid();
  
  List<HistoryItem> get historyItems => _historyItems;
  
  Future<void> initialize() async {
    // Register adapter if not registered
    if (!Hive.isAdapterRegistered(6)) {
      Hive.registerAdapter(HistoryItemAdapter());
    }
    
    // Open box
    _historyBox = await Hive.openBox<HistoryItem>(_historyBoxName);
    
    // Load history items
    _historyItems = _historyBox.values.toList();
    
    // Sort by visited time (newest first)
    _historyItems.sort((a, b) => b.visitedAt.compareTo(a.visitedAt));
  }
  
  Future<void> addHistoryItem(String url, String title, {String favicon = ''}) async {
    final id = _uuid.v4();
    final historyItem = HistoryItem(
      id: id,
      url: url,
      title: title.isNotEmpty ? title : url,
      favicon: favicon,
    );
    
    await _historyBox.put(id, historyItem);
    
    _historyItems = _historyBox.values.toList();
    _historyItems.sort((a, b) => b.visitedAt.compareTo(a.visitedAt));
    
    notifyListeners();
  }
  
  Future<void> deleteHistoryItem(String id) async {
    await _historyBox.delete(id);
    
    _historyItems = _historyBox.values.toList();
    _historyItems.sort((a, b) => b.visitedAt.compareTo(a.visitedAt));
    
    notifyListeners();
  }
  
  Future<void> clearHistory() async {
    await _historyBox.clear();
    
    _historyItems = [];
    
    notifyListeners();
  }
  
  List<HistoryItem> searchHistory(String query) {
    if (query.isEmpty) {
      return _historyItems;
    }
    
    final lowercaseQuery = query.toLowerCase();
    
    return _historyItems.where((item) {
      return item.title.toLowerCase().contains(lowercaseQuery) ||
             item.url.toLowerCase().contains(lowercaseQuery);
    }).toList();
  }
}

// This adapter class will be generated by build_runner
class HistoryItemAdapter extends TypeAdapter<HistoryItem> {
  @override
  final int typeId = 6;

  @override
  HistoryItem read(BinaryReader reader) {
    final numOfFields = reader.readByte();
    final fields = <int, dynamic>{
      for (int i = 0; i < numOfFields; i++) reader.readByte(): reader.read(),
    };
    
    return HistoryItem(
      id: fields[0] as String,
      url: fields[1] as String,
      title: fields[2] as String,
      favicon: fields[3] as String,
      visitedAt: fields[4] as DateTime,
    );
  }

  @override
  void write(BinaryWriter writer, HistoryItem obj) {
    writer
      ..writeByte(5)
      ..writeByte(0)
      ..write(obj.id)
      ..writeByte(1)
      ..write(obj.url)
      ..writeByte(2)
      ..write(obj.title)
      ..writeByte(3)
      ..write(obj.favicon)
      ..writeByte(4)
      ..write(obj.visitedAt);
  }
}