import 'package:flutter/material.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:veil/models/settings_model.dart';

class SettingsService extends ChangeNotifier {
  static const String _settingsBoxName = 'settings';
  static const String _personasBoxName = 'personas';
  
  late Box<Settings> _settingsBox;
  late Box<Persona> _personasBox;
  late Settings _settings;
  late List<Persona> _personas;
  
  Settings get settings => _settings;
  List<Persona> get personas => _personas;
  
  Future<void> initialize() async {
    // Register adapters if not registered
    if (!Hive.isAdapterRegistered(0)) {
      Hive.registerAdapter(SettingsAdapter());
    }
    
    if (!Hive.isAdapterRegistered(1)) {
      Hive.registerAdapter(PersonaAdapter());
    }
    
    // Open boxes
    _settingsBox = await Hive.openBox<Settings>(_settingsBoxName);
    _personasBox = await Hive.openBox<Persona>(_personasBoxName);
    
    // Load settings
    if (_settingsBox.isEmpty) {
      _settings = Settings();
      await _settingsBox.put('settings', _settings);
    } else {
      _settings = _settingsBox.get('settings')!;
    }
    
    // Load personas
    _personas = _personasBox.values.toList();
    
    // Create default personas if none exist
    if (_personas.isEmpty) {
      await _createDefaultPersonas();
    }
  }
  
  Future<void> _createDefaultPersonas() async {
    final defaultPersonas = [
      Persona(name: 'Default'),
      Persona(
        name: 'Privacy', 
        blockTrackers: true, 
        enableJavaScript: false,
        clearCookiesOnExit: true,
      ),
      Persona(
        name: 'Developer',
        blockTrackers: false,
        enableJavaScript: true,
        clearCookiesOnExit: false,
      ),
      Persona(
        name: 'Research',
        blockTrackers: true,
        enableJavaScript: true,
        clearCookiesOnExit: false,
      ),
    ];
    
    for (var persona in defaultPersonas) {
      await _personasBox.put(persona.name, persona);
    }
    
    _personas = _personasBox.values.toList();
  }
  
  Future<void> updateSettings(Settings newSettings) async {
    _settings = newSettings;
    await _settingsBox.put('settings', _settings);
    notifyListeners();
  }
  
  Future<void> addPersona(Persona persona) async {
    await _personasBox.put(persona.name, persona);
    _personas = _personasBox.values.toList();
    notifyListeners();
  }
  
  Future<void> updatePersona(Persona persona) async {
    await _personasBox.put(persona.name, persona);
    _personas = _personasBox.values.toList();
    notifyListeners();
  }
  
  Future<void> deletePersona(String name) async {
    await _personasBox.delete(name);
    _personas = _personasBox.values.toList();
    notifyListeners();
  }
  
  Future<void> setActivePersona(String name) async {
    _settings.activePersona = name;
    await _settingsBox.put('settings', _settings);
    notifyListeners();
  }
  
  Persona getActivePersona() {
    return _personasBox.get(_settings.activePersona) ?? _personasBox.get('Default')!;
  }
}

// These adapter classes will be generated by build_runner
class SettingsAdapter extends TypeAdapter<Settings> {
  @override
  final int typeId = 0;

  @override
  Settings read(BinaryReader reader) {
    final numOfFields = reader.readByte();
    final fields = <int, dynamic>{
      for (int i = 0; i < numOfFields; i++) reader.readByte(): reader.read(),
    };
    
    return Settings(
      useSystemColors: fields[0] as bool,
      themeMode: fields[1] as ThemeMode,
      enableJavaScript: fields[2] as bool,
      blockTrackers: fields[3] as bool,
      enableIncognitoByDefault: fields[4] as bool,
      defaultSearchEngine: fields[5] as String,
      enableFocusMode: fields[6] as bool,
      focusModeTimeLimit: fields[7] as int,
      enableGestureNavigation: fields[8] as bool,
      enableGlassMode: fields[9] as bool,
      adaptToLighting: fields[10] as bool,
      activePersona: fields[11] as String,
    );
  }

  @override
  void write(BinaryWriter writer, Settings obj) {
    writer
      ..writeByte(12)
      ..writeByte(0)
      ..write(obj.useSystemColors)
      ..writeByte(1)
      ..write(obj.themeMode)
      ..writeByte(2)
      ..write(obj.enableJavaScript)
      ..writeByte(3)
      ..write(obj.blockTrackers)
      ..writeByte(4)
      ..write(obj.enableIncognitoByDefault)
      ..writeByte(5)
      ..write(obj.defaultSearchEngine)
      ..writeByte(6)
      ..write(obj.enableFocusMode)
      ..writeByte(7)
      ..write(obj.focusModeTimeLimit)
      ..writeByte(8)
      ..write(obj.enableGestureNavigation)
      ..writeByte(9)
      ..write(obj.enableGlassMode)
      ..writeByte(10)
      ..write(obj.adaptToLighting)
      ..writeByte(11)
      ..write(obj.activePersona);
  }
}

class PersonaAdapter extends TypeAdapter<Persona> {
  @override
  final int typeId = 1;

  @override
  Persona read(BinaryReader reader) {
    final numOfFields = reader.readByte();
    final fields = <int, dynamic>{
      for (int i = 0; i < numOfFields; i++) reader.readByte(): reader.read(),
    };
    
    return Persona(
      name: fields[0] as String,
      blockTrackers: fields[1] as bool,
      enableJavaScript: fields[2] as bool,
      clearCookiesOnExit: fields[3] as bool,
    );
  }

  @override
  void write(BinaryWriter writer, Persona obj) {
    writer
      ..writeByte(4)
      ..writeByte(0)
      ..write(obj.name)
      ..writeByte(1)
      ..write(obj.blockTrackers)
      ..writeByte(2)
      ..write(obj.enableJavaScript)
      ..writeByte(3)
      ..write(obj.clearCookiesOnExit);
  }
}