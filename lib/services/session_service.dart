import 'package:flutter/material.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:uuid/uuid.dart';
import 'package:veil/models/tab_model.dart';

class SessionService extends ChangeNotifier {
  static const String _sessionsBoxName = 'sessions';
  
  late Box<Session> _sessionsBox;
  late List<Session> _sessions;
  final _uuid = Uuid();
  
  List<Session> get sessions => _sessions;
  
  Future<void> initialize() async {
    // Register adapters if not registered
    if (!Hive.isAdapterRegistered(2)) {
      Hive.registerAdapter(TabAdapter());
    }
    
    if (!Hive.isAdapterRegistered(3)) {
      Hive.registerAdapter(SessionAdapter());
    }
    
    // Open box
    _sessionsBox = await Hive.openBox<Session>(_sessionsBoxName);
    
    // Load sessions
    _sessions = _sessionsBox.values.toList();
    
    // Sort by last accessed time (newest first)
    _sessions.sort((a, b) => b.lastAccessed.compareTo(a.lastAccessed));
  }
  
  Future<void> saveSession(String name, List<Tab> tabs) async {
    final id = _uuid.v4();
    final session = Session(
      id: id,
      name: name,
      tabs: tabs,
    );
    
    await _sessionsBox.put(id, session);
    
    _sessions = _sessionsBox.values.toList();
    _sessions.sort((a, b) => b.lastAccessed.compareTo(a.lastAccessed));
    
    notifyListeners();
  }
  
  Future<void> updateSession(Session session) async {
    session.lastAccessed = DateTime.now();
    await _sessionsBox.put(session.id, session);
    
    _sessions = _sessionsBox.values.toList();
    _sessions.sort((a, b) => b.lastAccessed.compareTo(a.lastAccessed));
    
    notifyListeners();
  }
  
  Future<void> deleteSession(String id) async {
    await _sessionsBox.delete(id);
    
    _sessions = _sessionsBox.values.toList();
    _sessions.sort((a, b) => b.lastAccessed.compareTo(a.lastAccessed));
    
    notifyListeners();
  }
  
  Session? getSession(String id) {
    return _sessionsBox.get(id);
  }
}

// These adapter classes will be generated by build_runner
class TabAdapter extends TypeAdapter<Tab> {
  @override
  final int typeId = 2;

  @override
  Tab read(BinaryReader reader) {
    final numOfFields = reader.readByte();
    final fields = <int, dynamic>{
      for (int i = 0; i < numOfFields; i++) reader.readByte(): reader.read(),
    };
    
    return Tab(
      id: fields[0] as String,
      url: fields[1] as String,
      title: fields[2] as String,
      favicon: fields[3] as String,
      isIncognito: fields[4] as bool,
      scrollPosition: fields[5] as double,
      lastAccessed: fields[6] as DateTime,
    );
  }

  @override
  void write(BinaryWriter writer, Tab obj) {
    writer
      ..writeByte(7)
      ..writeByte(0)
      ..write(obj.id)
      ..writeByte(1)
      ..write(obj.url)
      ..writeByte(2)
      ..write(obj.title)
      ..writeByte(3)
      ..write(obj.favicon)
      ..writeByte(4)
      ..write(obj.isIncognito)
      ..writeByte(5)
      ..write(obj.scrollPosition)
      ..writeByte(6)
      ..write(obj.lastAccessed);
  }
}

class SessionAdapter extends TypeAdapter<Session> {
  @override
  final int typeId = 3;

  @override
  Session read(BinaryReader reader) {
    final numOfFields = reader.readByte();
    final fields = <int, dynamic>{
      for (int i = 0; i < numOfFields; i++) reader.readByte(): reader.read(),
    };
    
    return Session(
      id: fields[0] as String,
      name: fields[1] as String,
      tabs: (fields[2] as List).cast<Tab>(),
      createdAt: fields[3] as DateTime,
      lastAccessed: fields[4] as DateTime,
    );
  }

  @override
  void write(BinaryWriter writer, Session obj) {
    writer
      ..writeByte(5)
      ..writeByte(0)
      ..write(obj.id)
      ..writeByte(1)
      ..write(obj.name)
      ..writeByte(2)
      ..write(obj.tabs)
      ..writeByte(3)
      ..write(obj.createdAt)
      ..writeByte(4)
      ..write(obj.lastAccessed);
  }
}